@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
	<EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
		<DataAnnotationsValidator />
		<h4>@Page SimilarFilms</h4>
		<div class="mb-3">
			@if (Page.Equals(PageType.Delete))
			{
				<div class="form-control me-2">@Films.FirstOrDefault(f => f.Id == Model.FilmId)?.Title</div>
				<div class="form-control me-2">@Films.FirstOrDefault(f => f.Id == Model.SimilarFilmId)?.Title</div>
			}
			else
			{
				<InputSelect @bind-Value="Model.FilmId" class="form-control mb-3">
					<option value=0>Film Title</option>
					@foreach (var film in Films)
					{
						<option value="@film.Id">@film.Title</option>
					}
				</InputSelect>
				<InputSelect @bind-Value="Model.SimilarFilmId" class="form-control mb-3">
					<option value=0>Similar Film</option>
					@foreach (var film in Films)
					{
						<option value="@film.Id">@film.Title</option>
					}
				</InputSelect>
			}
			<ValidationMessage For="@(() => Model.FilmId)" />
			<ValidationMessage For="@(() => Model.SimilarFilmId)" />
		</div>
		<button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
	</EditForm>
</div>

@code {
	[Parameter] public SimilarFilmsDTO Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChange { get; set; }

	List<FilmDTO> Films { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Films = await AdminService.GetAsync<FilmDTO>("film");
	}

	private async Task OnFormSubmit()
	{
		try
		{
			if (Page.Equals(PageType.Create))
				await AdminService.CreateAsync<SimilarFilmsDTO>("similarfilms", Model);
			else if (Page.Equals(PageType.Delete))
				await AdminService.DeleteAsync<SimilarFilmsDTO>($"similarfilms", new SimilarFilmsDTO
					{
						FilmId = Model.FilmId,
						SimilarFilmId = Model.SimilarFilmId
					});
			await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("Couldn't create/delete the SimilarFilm.");
		}
	}
}