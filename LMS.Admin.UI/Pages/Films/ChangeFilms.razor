@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">

    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">

        <DataAnnotationsValidator />
        <h4>@Page Film</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
            }
            <ValidationMessage For="@(() => Model.Title)" />
        </div>

        @if (!Page.Equals(PageType.Delete))
        {
            <div class="mb-3">
                @if (Page.Equals(PageType.Edit))
                {
                    <label for="title">Title</label>
                }
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" placeholder="Title"></InputText>
                <ValidationMessage For="@(() => Model.Title)" />
            </div>

            

            <div class="mb-3">
                @if (Page.Equals(PageType.Edit))
                {
                    <label for="description">Description</label>
                }
                <InputText id="description" class="form-control me-2" @bind-Value="Model.Description" placeholder="Description"></InputText>
                <ValidationMessage For="@(() => Model.Description)" />
            </div>

            <div class="mb-3">
                @if (Page.Equals(PageType.Edit))
                {
                    <label for="filmurl">URL</label>
                }
                <InputText id="filmurl" class="form-control me-2" @bind-Value="Model.FilmUrl" placeholder="URL"></InputText>
                <ValidationMessage For="@(() => Model.FilmUrl)" />
            </div>

            <div class="form-group">
                <label for="datepicker">Released</label>
                <InputDate id="datepicker" class="form-control" @bind-Value="@Model.Released" />
            </div>

            <div class="mb-3">
                <label for="director">Director</label>
                <div class="select-wrapper">
                    <InputSelect id="director" class="form-select" @bind-Value="Model.DirectorId">
                        <option value="0">Select a director</option>
                        @foreach (var director in Directors)
                        {
                            <option value="@director.Id">@director.Name</option>
                        }
                    </InputSelect>
                    <i class="bi bi-caret-down"></i>
                </div>
            </div>

            <div class="mb-3">
                <label>
                    <InputCheckbox @bind-Value="Model.Free" />
                    Free
                </label>
            </div>
        }
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
    </EditForm>
</div>

@code {
    [Parameter] public FilmDTO Model { get; set; } = new FilmDTO { Released = DateTime.Now };
    [Parameter] public FilmGenreDTO GenreModel { get; set; } = new();
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }

    List<DirectorDTO> Directors { get; set; } = new();
    List<GenreDTO> Genres { get; set; } = new();
    List<FilmGenreCreateDTO> FilmGenres { get; set; } = new List<FilmGenreCreateDTO>();


    protected override async Task OnInitializedAsync()
    {
        Directors = await AdminService.GetAsync<DirectorDTO>("director");
        Genres = await AdminService.GetAsync<GenreDTO>("genre");
        FilmGenres = await AdminService.GetAsync<FilmGenreCreateDTO>("filmgenre");
    }

    private async Task OnFormSubmit()
    {
        try
        {

            if (Page.Equals(PageType.Create))
                await AdminService.CreateAsync<FilmDTO>("film", Model);
            else if (Page.Equals(PageType.Edit))
                await AdminService.EditAsync<FilmDTO>($"film/{Model.Id}", Model);
            else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<FilmDTO>($"film/{Model.Id}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the film.");
        }
    }
}